// Generated by view binder compiler. Do not edit!
package com.example.jobhunt.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.jobhunt.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemBookmarkBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView bookmarkEndDate;

  @NonNull
  public final ImageView bookmarkImg;

  @NonNull
  public final TextView bookmarkName;

  @NonNull
  public final TextView bookmarkStartDate;

  @NonNull
  public final ImageButton deleteBookmark;

  @NonNull
  public final ConstraintLayout itemBookmark;

  private ItemBookmarkBinding(@NonNull ConstraintLayout rootView, @NonNull TextView bookmarkEndDate,
      @NonNull ImageView bookmarkImg, @NonNull TextView bookmarkName,
      @NonNull TextView bookmarkStartDate, @NonNull ImageButton deleteBookmark,
      @NonNull ConstraintLayout itemBookmark) {
    this.rootView = rootView;
    this.bookmarkEndDate = bookmarkEndDate;
    this.bookmarkImg = bookmarkImg;
    this.bookmarkName = bookmarkName;
    this.bookmarkStartDate = bookmarkStartDate;
    this.deleteBookmark = deleteBookmark;
    this.itemBookmark = itemBookmark;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemBookmarkBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemBookmarkBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_bookmark, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemBookmarkBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bookmark_end_date;
      TextView bookmarkEndDate = ViewBindings.findChildViewById(rootView, id);
      if (bookmarkEndDate == null) {
        break missingId;
      }

      id = R.id.bookmark_img;
      ImageView bookmarkImg = ViewBindings.findChildViewById(rootView, id);
      if (bookmarkImg == null) {
        break missingId;
      }

      id = R.id.bookmark_name;
      TextView bookmarkName = ViewBindings.findChildViewById(rootView, id);
      if (bookmarkName == null) {
        break missingId;
      }

      id = R.id.bookmark_start_date;
      TextView bookmarkStartDate = ViewBindings.findChildViewById(rootView, id);
      if (bookmarkStartDate == null) {
        break missingId;
      }

      id = R.id.delete_bookmark;
      ImageButton deleteBookmark = ViewBindings.findChildViewById(rootView, id);
      if (deleteBookmark == null) {
        break missingId;
      }

      ConstraintLayout itemBookmark = (ConstraintLayout) rootView;

      return new ItemBookmarkBinding((ConstraintLayout) rootView, bookmarkEndDate, bookmarkImg,
          bookmarkName, bookmarkStartDate, deleteBookmark, itemBookmark);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
