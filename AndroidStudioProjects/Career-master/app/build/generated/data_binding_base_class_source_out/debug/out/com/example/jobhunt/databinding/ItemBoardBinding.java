// Generated by view binder compiler. Do not edit!
package com.example.jobhunt.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.jobhunt.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemBoardBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView boardContent;

  @NonNull
  public final TextView boardSubject;

  @NonNull
  public final TextView boardTitle;

  @NonNull
  public final TextView boardWriter;

  @NonNull
  public final ConstraintLayout itemRecent;

  private ItemBoardBinding(@NonNull ConstraintLayout rootView, @NonNull TextView boardContent,
      @NonNull TextView boardSubject, @NonNull TextView boardTitle, @NonNull TextView boardWriter,
      @NonNull ConstraintLayout itemRecent) {
    this.rootView = rootView;
    this.boardContent = boardContent;
    this.boardSubject = boardSubject;
    this.boardTitle = boardTitle;
    this.boardWriter = boardWriter;
    this.itemRecent = itemRecent;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemBoardBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemBoardBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_board, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemBoardBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.board_content;
      TextView boardContent = ViewBindings.findChildViewById(rootView, id);
      if (boardContent == null) {
        break missingId;
      }

      id = R.id.board_subject;
      TextView boardSubject = ViewBindings.findChildViewById(rootView, id);
      if (boardSubject == null) {
        break missingId;
      }

      id = R.id.board_title;
      TextView boardTitle = ViewBindings.findChildViewById(rootView, id);
      if (boardTitle == null) {
        break missingId;
      }

      id = R.id.board_writer;
      TextView boardWriter = ViewBindings.findChildViewById(rootView, id);
      if (boardWriter == null) {
        break missingId;
      }

      ConstraintLayout itemRecent = (ConstraintLayout) rootView;

      return new ItemBoardBinding((ConstraintLayout) rootView, boardContent, boardSubject,
          boardTitle, boardWriter, itemRecent);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
